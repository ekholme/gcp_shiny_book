[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GCP Shiny Booklet",
    "section": "",
    "text": "There’s a lot of documentation out there about both R and Google Cloud Platform (GCP), but there’s not a ton at the intersection of these things. This book provides an end-to-end example of deploying a shiny app that’s connected to a database to GCP."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Welcome to Deploying Shiny with Google Cloud! This book – well, booklet, really – is meant to help R users and shiny developers deploy applications using Google Cloud Platform (GCP). Although there are several “hello world” type blog posts out there describing how to deploy an “Old Faithful” shiny app via GCP, there aren’t as many that describe how to deploy apps that align with real-world needs, such as connecting your app to a Cloud SQL database, managing secrets, and securing the application.\nThis booklet is my attempt to fill that gap and provide an end-to-end example that uses several GCP services to run a {shiny} app that more closely aligns with what developers might hope to actually deploy. This isn’t to say we’re building a production-grade app here (we are emphatically not), but rather that this book will highlight features that you will use in production apps that typically aren’t discussed in the “hello world” tutorials.\nFor the most part, I’ll illustrate this process using the GCP console, which is the graphical user interface (GUI) through which users can configure GCP services and whatnot. That said, there will be some cases in which I use the command line and the gcloud SDK or other command line interfaces (CLIs, e.g. psql). When this is the case, I’ll try to describe why I’m opting for the CLI over the console.\nOne caveat of the above is that the Google can change the appearance of the console, so it’s possible that the screenshots in this book aren’t perfectly representative of the current console, but they’re likely close enough.\nPerhaps obviously, this book includes R code. Additionally, it also includes a smattering of supplemental code that is necessary to get your app up and running, such as configurations within Dockerfiles or YAML files. My assumption is that people reading this book are mostly familiar with R, and have some familiarity with YAML in the context of Rmarkdown documents, so I’ll be more explicit in describing the content of non-R code and what it’s doing."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "intro.html#goals-non-goals",
    "href": "intro.html#goals-non-goals",
    "title": "1  Introduction",
    "section": "1.2 Goals & Non-Goals",
    "text": "1.2 Goals & Non-Goals\nBy the end of this book, you will be able to:\n\nUnderstand what shiny is, what GCP is, and how they can fit together;\nWrite a basic shiny app and run it locally;\nUnderstand the basics of Docker, containers, and how to build & store a container on GCP;\nCreate a Postgres database on Google Cloud SQL and load sample data into it;\nConnect your shiny app deployed on Google Cloud Run to your Cloud SQL database (and do so without exposing secrets);\nConfigure Cloud Run settings so they’re appropriate for your shiny app;\nPassword protect your application\n\nI think it’s also important to highlight the non-goals of the book. These are things that are useful to know but are beyond the scope of this book. Here are some things this book won’t cover:\n\nImproving your shiny app development skills. If you want to learn more about shiny, your best bet is Mastering Shiny by Hadley Wickham. If you’re into videos, you might also check out the Shiny Developer Series videos by Eric Nantz.\nWriting production-grade shiny apps. There’s a better book out there by Colin Fay\nDatabase administration. We’ll spin up a small sample database that we’ll connect our app to for illustration purposes, but in the real world, you’ll likely need to manage your database. Although many of Google’s database products are managed in the sense that they handle maintaining, provisioning, etc. for you, you do still need to pay attention to them. I’m not a database admnistrator, so this is outside of my expertise. If you’re building a production app for your organization, you’ll want to bring in someone that knows about databases.\nAdvanced Docker. Docker is super cool and powerful. It can do a lot. We’re using it to containerize an app, and we’re leveraging images provided by the Rocker Project to do so. We’re going to leave most of the functionality of Docker untouched."
  },
  {
    "objectID": "intro.html#prerequisites",
    "href": "intro.html#prerequisites",
    "title": "1  Introduction",
    "section": "1.3 Prerequisites",
    "text": "1.3 Prerequisites\nThis booklet is probably most useful for intermediate R users interested in deploying applications to GCP. To get the most out of this book, you probably want to come in with:\n\nThe ability to conduct “basic” data analysis using R and {tidyverse} packages. If you’re looking to learn more about data science with R, Hadley Wickham’s R for Data Science is a great resource.\nSome familiarity making simple shiny apps.\nExperience using git/Github.\nSome experience working with databases.\nDocker installed. We’ll walk through the basics of how to use it in the context of this project, but we won’t install it together."
  },
  {
    "objectID": "background.html",
    "href": "background.html",
    "title": "Background",
    "section": "",
    "text": "This section of the book provides some high-level overview and background on shiny, GCP, Docker, git and other technologies we’ll be using. If you’re familiar with this stuff already, feel free to skip ahead!"
  },
  {
    "objectID": "hello_world.html",
    "href": "hello_world.html",
    "title": "5  Hello, World!",
    "section": "",
    "text": "This section of the book contains some basic steps to get you up and running"
  },
  {
    "objectID": "intro.html#purpose",
    "href": "intro.html#purpose",
    "title": "1  Introduction",
    "section": "1.1 Purpose",
    "text": "1.1 Purpose\nAgain, the purpose of the book is to help people who want to deploy shiny apps to GCP, and to create a one-stop-shop (sort of) that can walk through a slightly-more-than-minimal example of doing this."
  },
  {
    "objectID": "shiny.html",
    "href": "shiny.html",
    "title": "Shiny",
    "section": "",
    "text": "This section describes how to create a basic shiny app that we’ll use in this project. It also describes some initial project setup that will be helpful for us later."
  },
  {
    "objectID": "create_proj.html",
    "href": "create_proj.html",
    "title": "6  Create Your Project",
    "section": "",
    "text": "This chapter describes the initial steps for creating your project, including setting up a git repo."
  },
  {
    "objectID": "basic_app.html",
    "href": "basic_app.html",
    "title": "7  Base App",
    "section": "",
    "text": "This chapter describes how to create the base version of the shiny app we’ll use in this project. It’ll also show how we can deploy it locally."
  },
  {
    "objectID": "containers.html",
    "href": "containers.html",
    "title": "Containers",
    "section": "",
    "text": "This section presents an overview of containers & how we’ll use them in this project. First, we’ll discuss Docker at a high level and write out the first iteration of the Dockerfile we’ll use in this project. Next, we’ll describe Google Cloud Build and Artifact Registry, which we’ll use to build and store our container, respectively."
  },
  {
    "objectID": "docker.html",
    "href": "docker.html",
    "title": "8  Docker",
    "section": "",
    "text": "Misc\n\nmention creating your own image on Dockerhub so that the whole thing doesn’t need to build from scratch"
  },
  {
    "objectID": "cloudbuild.html",
    "href": "cloudbuild.html",
    "title": "9  Cloud Build & Artifact Registry",
    "section": "",
    "text": "Misc\n\nmention cloudbuild.yaml setup\nmention CI/CD\nsort of misc note that cloud build doesn’t cache builds, so each time you build it is “from scratch”"
  },
  {
    "objectID": "cloud_sql.html",
    "href": "cloud_sql.html",
    "title": "Cloud SQL",
    "section": "",
    "text": "This section describes setting up a Postgres SQL database in Cloud SQL, including initially configuring the database, connecting to the database via a CLI (if you want to do this), loading data into the database,"
  },
  {
    "objectID": "sql_setup.html",
    "href": "sql_setup.html",
    "title": "10  Cloud SQL Setup",
    "section": "",
    "text": "This chapter describes how to set up Cloud SQL for this project."
  },
  {
    "objectID": "sql_create.html",
    "href": "sql_create.html",
    "title": "11  Creating Your Table",
    "section": "",
    "text": "This section describes how to create tables in Cloud SQL."
  },
  {
    "objectID": "cloud_run.html",
    "href": "cloud_run.html",
    "title": "12  Cloud Run",
    "section": "",
    "text": "This section describes how to deploy your app on Cloud Run, focusing on the configurations specific to shiny and Cloud Run."
  },
  {
    "objectID": "shiny_background.html",
    "href": "shiny_background.html",
    "title": "2  Shiny Background",
    "section": "",
    "text": "If you’re reading this, chances are that you already know what shiny is. You’ve probably built a few shiny apps locally, maybe you’ve deployed some to shinyapps.io or other platforms, and now you’re curious about how to deploy your app to GCP.\nBut, just so we’re all on the same page, this chapter is going to give a criminally brief and terribly incomplete overview of what shiny is. If you’re looking to learn more about developing shiny apps, there are lots of great resources out there, and RStudio’s shiny site is probably the best place to start."
  },
  {
    "objectID": "shiny_background.html#what-is-shiny",
    "href": "shiny_background.html#what-is-shiny",
    "title": "2  Shiny Background",
    "section": "2.1 What Is Shiny?",
    "text": "2.1 What Is Shiny?\nShiny is a framework through which R users can build interactive web apps. Shiny apps can be many things, but they’re often dashboards or some other style of tool for interacting with data and/or statistical models. When describing them, I’m mostly going to assume you’re making a dashboard. One of the nice features of shiny is that you can build these apps purely with R code – you don’t need to know HTML, CSS, Javascript, or any other backend language like Go or Rust or Python. Knowing some HTML/CSS/Javascript can be helpful if you want to extend your shiny app, but they’re not necessary.\nAnother nice feature of shiny is that, since it’s built using R code, it interacts nicely with other R code. This means we can do things like work with dataframes and model objects easily without having to worry about translating these things into objects that other languages can understand. It also means we can prototype apps fairly quickly."
  },
  {
    "objectID": "shiny_background.html#components-of-a-shiny-app",
    "href": "shiny_background.html#components-of-a-shiny-app",
    "title": "2  Shiny Background",
    "section": "2.2 Components of a Shiny App",
    "text": "2.2 Components of a Shiny App\nAt a very broad level, shiny apps consist of two components: a user interface (UI) and a server (there’s no acronym for server, just FYI).\n\n2.2.1 UI\nLike its name suggests, the UI is how users interact (or interface) with your application. It usually consists of input devices (dropdowns, sliders, open text, etc) and output displays (e.g. tables, graphs, text) arranged in a way that’s hopefully appealing and navigable. The inputs of the UI are (always? almost always?) parameters that get passed to functions in the server, and the outputs in the UI are the results of functions executed by the server.\n\n\n2.2.2 Server\nThe server is where the logic of your code gets executed. Its job is to wrap together several functions that take inputs from the UI (as well as inputs not defined in the UI), pass them into functions, and then pass the results of these functions back to the UI to display as outputs. Moreso than the UI, the server is reminiscent of “typical” R code. The server is where you’ll predict from models, create plots, query databases, etc."
  },
  {
    "objectID": "shiny_background.html#old-faithful",
    "href": "shiny_background.html#old-faithful",
    "title": "2  Shiny Background",
    "section": "2.3 Old Faithful",
    "text": "2.3 Old Faithful\nIf you’ve been around shiny for any amount of time, you’ve probably seen the Old Faithful shiny app, which is basically the “hello world” of shiny. Here’s the code for it (cribbed from RStudio):\n\nlibrary(shiny)\n\n# Define UI for app that draws a histogram ----\nui <- fluidPage(\n\n  # App title ----\n  titlePanel(\"Hello Shiny!\"),\n\n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(\n\n    # Sidebar panel for inputs ----\n    sidebarPanel(\n\n      # Input: Slider for the number of bins ----\n      sliderInput(inputId = \"bins\",\n                  label = \"Number of bins:\",\n                  min = 1,\n                  max = 50,\n                  value = 30)\n\n    ),\n\n    # Main panel for displaying outputs ----\n    mainPanel(\n\n      # Output: Histogram ----\n      plotOutput(outputId = \"distPlot\")\n\n    )\n  )\n)\n\n# Define server logic required to draw a histogram ----\nserver <- function(input, output, session) {\n\n  # Histogram of the Old Faithful Geyser Data ----\n  # with requested number of bins\n  # This expression that generates a histogram is wrapped in a call\n  # to renderPlot to indicate that:\n  #\n  # 1. It is \"reactive\" and therefore should be automatically\n  #    re-executed when inputs (input$bins) change\n  # 2. Its output type is a plot\n  output$distPlot <- renderPlot({\n\n    x    <- faithful$waiting\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n\n    hist(x, breaks = bins, col = \"#75AADB\", border = \"white\",\n         xlab = \"Waiting time to next eruption (in mins)\",\n         main = \"Histogram of waiting times\")\n\n    })\n\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "shiny_background.html#wrapping-up",
    "href": "shiny_background.html#wrapping-up",
    "title": "2  Shiny Background",
    "section": "2.4 Wrapping Up",
    "text": "2.4 Wrapping Up\nThis brief chapter is meant to give a way-too-short description of shiny. My assumption is that if you’re reading this book, you likely know all of this already. And if this information was new to you, you may want to learn more about shiny before proceeding."
  }
]